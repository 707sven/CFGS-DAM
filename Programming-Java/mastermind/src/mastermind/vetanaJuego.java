/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mastermind;

import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author usuario
 */
public class vetanaJuego extends javax.swing.JFrame {

    Inicio play;
    //Comprobar si el cubo tiene color
    boolean color;
    // Creamos la lista de cubos
    ArrayList<JTextArea> listaCubos = new ArrayList<>();
    // Lista de colores
    ArrayList<Integer> listaColores = new ArrayList<>();
    // Array de respuesta
    ArrayList<Integer> respuesta = new ArrayList<>();
    // final
    boolean fin;
    // Contador
    int contador = 1;

    public vetanaJuego(Inicio ventana) {
        initComponents();
        this.setVisible(true);
    }

    public vetanaJuego() {
        initComponents();
        // Ventana en el centro
        this.setLocationRelativeTo(null);

        // Titulo ventana
        this.setTitle("Mastermind: 1ºB");

        // Añadimos los cubos a la lista
        listaCubos.add(cubo1);
        listaCubos.add(cubo2);
        listaCubos.add(cubo3);
        listaCubos.add(cubo4);

        //rojo 0 - verde 1 - azul 2 - amarillo 3
        //Array respuesta correcta
        int numeroAleatorio;
        for (int i = 0; i <= 3; i++) {
            numeroAleatorio = (int) (Math.random() * 4);
            respuesta.add(numeroAleatorio);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Fondo = new javax.swing.JPanel();
        Partida = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        cubo2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        cubo4 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        cubo3 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        cubo1 = new javax.swing.JTextArea();
        jScrollPane9 = new javax.swing.JScrollPane();
        cubo5 = new javax.swing.JTextArea();
        jScrollPane10 = new javax.swing.JScrollPane();
        cubo6 = new javax.swing.JTextArea();
        jScrollPane11 = new javax.swing.JScrollPane();
        cubo7 = new javax.swing.JTextArea();
        jScrollPane12 = new javax.swing.JScrollPane();
        cubo8 = new javax.swing.JTextArea();
        jScrollPane17 = new javax.swing.JScrollPane();
        cubo9 = new javax.swing.JTextArea();
        jScrollPane18 = new javax.swing.JScrollPane();
        cubo10 = new javax.swing.JTextArea();
        jScrollPane19 = new javax.swing.JScrollPane();
        cubo11 = new javax.swing.JTextArea();
        jScrollPane20 = new javax.swing.JScrollPane();
        cubo12 = new javax.swing.JTextArea();
        jScrollPane25 = new javax.swing.JScrollPane();
        cubo13 = new javax.swing.JTextArea();
        jScrollPane26 = new javax.swing.JScrollPane();
        cubo14 = new javax.swing.JTextArea();
        jScrollPane27 = new javax.swing.JScrollPane();
        cubo15 = new javax.swing.JTextArea();
        jScrollPane28 = new javax.swing.JScrollPane();
        cubo16 = new javax.swing.JTextArea();
        jScrollPane33 = new javax.swing.JScrollPane();
        cubo17 = new javax.swing.JTextArea();
        jScrollPane34 = new javax.swing.JScrollPane();
        cubo18 = new javax.swing.JTextArea();
        jScrollPane35 = new javax.swing.JScrollPane();
        cubo19 = new javax.swing.JTextArea();
        jScrollPane36 = new javax.swing.JScrollPane();
        cubo20 = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        blancoNegro = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        comprobacion1_3 = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        comprobacion1_1 = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        comprobacion1_4 = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        comprobacion1_2 = new javax.swing.JTextArea();
        jScrollPane13 = new javax.swing.JScrollPane();
        comprobacion2_1 = new javax.swing.JTextArea();
        jScrollPane14 = new javax.swing.JScrollPane();
        comprobacion2_3 = new javax.swing.JTextArea();
        jScrollPane15 = new javax.swing.JScrollPane();
        comprobacion2_4 = new javax.swing.JTextArea();
        jScrollPane16 = new javax.swing.JScrollPane();
        comprobacion2_2 = new javax.swing.JTextArea();
        jScrollPane21 = new javax.swing.JScrollPane();
        comprobacion3_1 = new javax.swing.JTextArea();
        jScrollPane22 = new javax.swing.JScrollPane();
        comprobacion3_3 = new javax.swing.JTextArea();
        jScrollPane23 = new javax.swing.JScrollPane();
        comprobacion3_4 = new javax.swing.JTextArea();
        jScrollPane24 = new javax.swing.JScrollPane();
        comprobacion3_2 = new javax.swing.JTextArea();
        jScrollPane29 = new javax.swing.JScrollPane();
        comprobacion4_3 = new javax.swing.JTextArea();
        jScrollPane30 = new javax.swing.JScrollPane();
        comprobacion4_4 = new javax.swing.JTextArea();
        jScrollPane31 = new javax.swing.JScrollPane();
        comprobacion4_2 = new javax.swing.JTextArea();
        jScrollPane32 = new javax.swing.JScrollPane();
        comprobacion4_1 = new javax.swing.JTextArea();
        jScrollPane37 = new javax.swing.JScrollPane();
        comprobacion5_1 = new javax.swing.JTextArea();
        jScrollPane38 = new javax.swing.JScrollPane();
        comprobacion5_3 = new javax.swing.JTextArea();
        jScrollPane39 = new javax.swing.JScrollPane();
        comprobacion5_4 = new javax.swing.JTextArea();
        jScrollPane40 = new javax.swing.JScrollPane();
        comprobacion5_2 = new javax.swing.JTextArea();
        jSeparator2 = new javax.swing.JSeparator();
        Colores = new javax.swing.JPanel();
        bAmarillo = new javax.swing.JButton();
        bAzul = new javax.swing.JButton();
        bVerde = new javax.swing.JButton();
        bRojo = new javax.swing.JButton();
        comprobar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        borrar = new javax.swing.JButton();
        fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        setResizable(false);

        Fondo.setBackground(new java.awt.Color(147, 102, 102));
        Fondo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Partida.setBackground(new java.awt.Color(71, 54, 46));
        Partida.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo2.setEditable(false);
        cubo2.setBackground(java.awt.Color.white);
        cubo2.setColumns(20);
        cubo2.setRows(5);
        cubo2.setEnabled(false);
        cubo2.setRequestFocusEnabled(false);
        jScrollPane2.setViewportView(cubo2);

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo4.setEditable(false);
        cubo4.setBackground(java.awt.Color.white);
        cubo4.setColumns(20);
        cubo4.setRows(5);
        cubo4.setEnabled(false);
        cubo4.setRequestFocusEnabled(false);
        jScrollPane3.setViewportView(cubo4);

        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo3.setEditable(false);
        cubo3.setBackground(java.awt.Color.white);
        cubo3.setColumns(20);
        cubo3.setRows(5);
        cubo3.setEnabled(false);
        cubo3.setRequestFocusEnabled(false);
        jScrollPane4.setViewportView(cubo3);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo1.setBackground(java.awt.Color.white);
        cubo1.setColumns(20);
        cubo1.setRows(5);
        cubo1.setEnabled(false);
        cubo1.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(cubo1);

        jScrollPane9.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane9.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo5.setBackground(java.awt.Color.white);
        cubo5.setColumns(20);
        cubo5.setRows(5);
        cubo5.setEnabled(false);
        cubo5.setRequestFocusEnabled(false);
        jScrollPane9.setViewportView(cubo5);

        jScrollPane10.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane10.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo6.setEditable(false);
        cubo6.setBackground(java.awt.Color.white);
        cubo6.setColumns(20);
        cubo6.setRows(5);
        cubo6.setEnabled(false);
        cubo6.setRequestFocusEnabled(false);
        jScrollPane10.setViewportView(cubo6);

        jScrollPane11.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane11.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo7.setEditable(false);
        cubo7.setBackground(java.awt.Color.white);
        cubo7.setColumns(20);
        cubo7.setRows(5);
        cubo7.setEnabled(false);
        cubo7.setRequestFocusEnabled(false);
        jScrollPane11.setViewportView(cubo7);

        jScrollPane12.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane12.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo8.setEditable(false);
        cubo8.setBackground(java.awt.Color.white);
        cubo8.setColumns(20);
        cubo8.setRows(5);
        cubo8.setEnabled(false);
        cubo8.setRequestFocusEnabled(false);
        jScrollPane12.setViewportView(cubo8);

        jScrollPane17.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane17.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo9.setEditable(false);
        cubo9.setBackground(java.awt.Color.white);
        cubo9.setColumns(20);
        cubo9.setRows(5);
        cubo9.setEnabled(false);
        cubo9.setRequestFocusEnabled(false);
        jScrollPane17.setViewportView(cubo9);

        jScrollPane18.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane18.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo10.setEditable(false);
        cubo10.setBackground(java.awt.Color.white);
        cubo10.setColumns(20);
        cubo10.setRows(5);
        cubo10.setEnabled(false);
        cubo10.setRequestFocusEnabled(false);
        jScrollPane18.setViewportView(cubo10);

        jScrollPane19.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane19.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo11.setEditable(false);
        cubo11.setBackground(java.awt.Color.white);
        cubo11.setColumns(20);
        cubo11.setRows(5);
        cubo11.setEnabled(false);
        cubo11.setRequestFocusEnabled(false);
        jScrollPane19.setViewportView(cubo11);

        jScrollPane20.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane20.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo12.setBackground(java.awt.Color.white);
        cubo12.setColumns(20);
        cubo12.setRows(5);
        cubo12.setEnabled(false);
        cubo12.setRequestFocusEnabled(false);
        jScrollPane20.setViewportView(cubo12);

        jScrollPane25.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane25.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo13.setBackground(java.awt.Color.white);
        cubo13.setColumns(20);
        cubo13.setRows(5);
        cubo13.setEnabled(false);
        cubo13.setRequestFocusEnabled(false);
        jScrollPane25.setViewportView(cubo13);

        jScrollPane26.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane26.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo14.setEditable(false);
        cubo14.setBackground(java.awt.Color.white);
        cubo14.setColumns(20);
        cubo14.setRows(5);
        cubo14.setEnabled(false);
        cubo14.setRequestFocusEnabled(false);
        jScrollPane26.setViewportView(cubo14);

        jScrollPane27.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane27.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo15.setEditable(false);
        cubo15.setBackground(java.awt.Color.white);
        cubo15.setColumns(20);
        cubo15.setRows(5);
        cubo15.setEnabled(false);
        cubo15.setRequestFocusEnabled(false);
        jScrollPane27.setViewportView(cubo15);

        jScrollPane28.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane28.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo16.setEditable(false);
        cubo16.setBackground(java.awt.Color.white);
        cubo16.setColumns(20);
        cubo16.setRows(5);
        cubo16.setEnabled(false);
        cubo16.setRequestFocusEnabled(false);
        jScrollPane28.setViewportView(cubo16);

        jScrollPane33.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane33.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo17.setBackground(java.awt.Color.white);
        cubo17.setColumns(20);
        cubo17.setRows(5);
        cubo17.setEnabled(false);
        cubo17.setRequestFocusEnabled(false);
        jScrollPane33.setViewportView(cubo17);

        jScrollPane34.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane34.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo18.setEditable(false);
        cubo18.setBackground(java.awt.Color.white);
        cubo18.setColumns(20);
        cubo18.setRows(5);
        cubo18.setEnabled(false);
        cubo18.setRequestFocusEnabled(false);
        jScrollPane34.setViewportView(cubo18);

        jScrollPane35.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane35.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo19.setEditable(false);
        cubo19.setBackground(java.awt.Color.white);
        cubo19.setColumns(20);
        cubo19.setRows(5);
        cubo19.setEnabled(false);
        cubo19.setRequestFocusEnabled(false);
        jScrollPane35.setViewportView(cubo19);

        jScrollPane36.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane36.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cubo20.setEditable(false);
        cubo20.setBackground(java.awt.Color.white);
        cubo20.setColumns(20);
        cubo20.setRows(5);
        cubo20.setEnabled(false);
        cubo20.setRequestFocusEnabled(false);
        jScrollPane36.setViewportView(cubo20);

        javax.swing.GroupLayout PartidaLayout = new javax.swing.GroupLayout(Partida);
        Partida.setLayout(PartidaLayout);
        PartidaLayout.setHorizontalGroup(
            PartidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PartidaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PartidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PartidaLayout.createSequentialGroup()
                        .addGroup(PartidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PartidaLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PartidaLayout.createSequentialGroup()
                                .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PartidaLayout.createSequentialGroup()
                                .addComponent(jScrollPane25, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane26, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane27, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane28, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PartidaLayout.createSequentialGroup()
                                .addComponent(jScrollPane33, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane34, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane35, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane36, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PartidaLayout.createSequentialGroup()
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        PartidaLayout.setVerticalGroup(
            PartidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PartidaLayout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(PartidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane33, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane36, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane35, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane34, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PartidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane25, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane28, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane27, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane26, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PartidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PartidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(PartidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        Fondo.add(Partida, new org.netbeans.lib.awtextra.AbsoluteConstraints(62, 77, -1, -1));

        blancoNegro.setBackground(new java.awt.Color(71, 54, 46));
        blancoNegro.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion1_3.setEditable(false);
        comprobacion1_3.setBackground(java.awt.Color.white);
        comprobacion1_3.setColumns(20);
        comprobacion1_3.setRows(5);
        comprobacion1_3.setEnabled(false);
        comprobacion1_3.setRequestFocusEnabled(false);
        jScrollPane5.setViewportView(comprobacion1_3);

        jScrollPane6.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane6.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion1_1.setEditable(false);
        comprobacion1_1.setBackground(java.awt.Color.white);
        comprobacion1_1.setColumns(20);
        comprobacion1_1.setRows(5);
        comprobacion1_1.setEnabled(false);
        comprobacion1_1.setRequestFocusEnabled(false);
        jScrollPane6.setViewportView(comprobacion1_1);

        jScrollPane7.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane7.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion1_4.setEditable(false);
        comprobacion1_4.setBackground(java.awt.Color.white);
        comprobacion1_4.setColumns(20);
        comprobacion1_4.setRows(5);
        comprobacion1_4.setEnabled(false);
        comprobacion1_4.setRequestFocusEnabled(false);
        jScrollPane7.setViewportView(comprobacion1_4);

        jScrollPane8.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane8.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion1_2.setEditable(false);
        comprobacion1_2.setBackground(java.awt.Color.white);
        comprobacion1_2.setColumns(20);
        comprobacion1_2.setRows(5);
        comprobacion1_2.setEnabled(false);
        comprobacion1_2.setRequestFocusEnabled(false);
        jScrollPane8.setViewportView(comprobacion1_2);

        jScrollPane13.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane13.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion2_1.setEditable(false);
        comprobacion2_1.setBackground(java.awt.Color.white);
        comprobacion2_1.setColumns(20);
        comprobacion2_1.setRows(5);
        comprobacion2_1.setEnabled(false);
        comprobacion2_1.setRequestFocusEnabled(false);
        jScrollPane13.setViewportView(comprobacion2_1);

        jScrollPane14.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane14.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion2_3.setEditable(false);
        comprobacion2_3.setBackground(java.awt.Color.white);
        comprobacion2_3.setColumns(20);
        comprobacion2_3.setRows(5);
        comprobacion2_3.setEnabled(false);
        comprobacion2_3.setRequestFocusEnabled(false);
        jScrollPane14.setViewportView(comprobacion2_3);

        jScrollPane15.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane15.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion2_4.setEditable(false);
        comprobacion2_4.setBackground(java.awt.Color.white);
        comprobacion2_4.setColumns(20);
        comprobacion2_4.setRows(5);
        comprobacion2_4.setEnabled(false);
        comprobacion2_4.setRequestFocusEnabled(false);
        jScrollPane15.setViewportView(comprobacion2_4);

        jScrollPane16.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane16.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion2_2.setEditable(false);
        comprobacion2_2.setBackground(java.awt.Color.white);
        comprobacion2_2.setColumns(20);
        comprobacion2_2.setRows(5);
        comprobacion2_2.setEnabled(false);
        comprobacion2_2.setRequestFocusEnabled(false);
        jScrollPane16.setViewportView(comprobacion2_2);

        jScrollPane21.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane21.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion3_1.setEditable(false);
        comprobacion3_1.setBackground(java.awt.Color.white);
        comprobacion3_1.setColumns(20);
        comprobacion3_1.setRows(5);
        comprobacion3_1.setEnabled(false);
        comprobacion3_1.setRequestFocusEnabled(false);
        jScrollPane21.setViewportView(comprobacion3_1);

        jScrollPane22.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane22.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion3_3.setEditable(false);
        comprobacion3_3.setBackground(java.awt.Color.white);
        comprobacion3_3.setColumns(20);
        comprobacion3_3.setRows(5);
        comprobacion3_3.setEnabled(false);
        comprobacion3_3.setRequestFocusEnabled(false);
        jScrollPane22.setViewportView(comprobacion3_3);

        jScrollPane23.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane23.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion3_4.setEditable(false);
        comprobacion3_4.setBackground(java.awt.Color.white);
        comprobacion3_4.setColumns(20);
        comprobacion3_4.setRows(5);
        comprobacion3_4.setEnabled(false);
        comprobacion3_4.setRequestFocusEnabled(false);
        jScrollPane23.setViewportView(comprobacion3_4);

        jScrollPane24.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane24.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion3_2.setEditable(false);
        comprobacion3_2.setBackground(java.awt.Color.white);
        comprobacion3_2.setColumns(20);
        comprobacion3_2.setRows(5);
        comprobacion3_2.setEnabled(false);
        comprobacion3_2.setRequestFocusEnabled(false);
        jScrollPane24.setViewportView(comprobacion3_2);

        jScrollPane29.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane29.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion4_3.setEditable(false);
        comprobacion4_3.setBackground(java.awt.Color.white);
        comprobacion4_3.setColumns(20);
        comprobacion4_3.setRows(5);
        comprobacion4_3.setEnabled(false);
        comprobacion4_3.setRequestFocusEnabled(false);
        jScrollPane29.setViewportView(comprobacion4_3);

        jScrollPane30.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane30.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion4_4.setEditable(false);
        comprobacion4_4.setBackground(java.awt.Color.white);
        comprobacion4_4.setColumns(20);
        comprobacion4_4.setRows(5);
        comprobacion4_4.setEnabled(false);
        comprobacion4_4.setRequestFocusEnabled(false);
        jScrollPane30.setViewportView(comprobacion4_4);

        jScrollPane31.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane31.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion4_2.setEditable(false);
        comprobacion4_2.setBackground(java.awt.Color.white);
        comprobacion4_2.setColumns(20);
        comprobacion4_2.setRows(5);
        comprobacion4_2.setEnabled(false);
        comprobacion4_2.setRequestFocusEnabled(false);
        jScrollPane31.setViewportView(comprobacion4_2);

        jScrollPane32.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane32.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion4_1.setEditable(false);
        comprobacion4_1.setBackground(java.awt.Color.white);
        comprobacion4_1.setColumns(20);
        comprobacion4_1.setRows(5);
        comprobacion4_1.setEnabled(false);
        comprobacion4_1.setRequestFocusEnabled(false);
        jScrollPane32.setViewportView(comprobacion4_1);

        jScrollPane37.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane37.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion5_1.setEditable(false);
        comprobacion5_1.setBackground(java.awt.Color.white);
        comprobacion5_1.setColumns(20);
        comprobacion5_1.setRows(5);
        comprobacion5_1.setEnabled(false);
        comprobacion5_1.setRequestFocusEnabled(false);
        jScrollPane37.setViewportView(comprobacion5_1);

        jScrollPane38.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane38.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion5_3.setEditable(false);
        comprobacion5_3.setBackground(java.awt.Color.white);
        comprobacion5_3.setColumns(20);
        comprobacion5_3.setRows(5);
        comprobacion5_3.setEnabled(false);
        comprobacion5_3.setRequestFocusEnabled(false);
        jScrollPane38.setViewportView(comprobacion5_3);

        jScrollPane39.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane39.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion5_4.setEditable(false);
        comprobacion5_4.setBackground(java.awt.Color.white);
        comprobacion5_4.setColumns(20);
        comprobacion5_4.setRows(5);
        comprobacion5_4.setEnabled(false);
        comprobacion5_4.setRequestFocusEnabled(false);
        jScrollPane39.setViewportView(comprobacion5_4);

        jScrollPane40.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane40.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        comprobacion5_2.setEditable(false);
        comprobacion5_2.setBackground(java.awt.Color.white);
        comprobacion5_2.setColumns(20);
        comprobacion5_2.setRows(5);
        comprobacion5_2.setEnabled(false);
        comprobacion5_2.setRequestFocusEnabled(false);
        jScrollPane40.setViewportView(comprobacion5_2);

        javax.swing.GroupLayout blancoNegroLayout = new javax.swing.GroupLayout(blancoNegro);
        blancoNegro.setLayout(blancoNegroLayout);
        blancoNegroLayout.setHorizontalGroup(
            blancoNegroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blancoNegroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(blancoNegroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(blancoNegroLayout.createSequentialGroup()
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(blancoNegroLayout.createSequentialGroup()
                        .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(blancoNegroLayout.createSequentialGroup()
                        .addComponent(jScrollPane29, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane30, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane32, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(blancoNegroLayout.createSequentialGroup()
                        .addComponent(jScrollPane38, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane39, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane37, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(blancoNegroLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(blancoNegroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane24, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane31, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane40, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSeparator2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, blancoNegroLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(blancoNegroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(blancoNegroLayout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(blancoNegroLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        blancoNegroLayout.setVerticalGroup(
            blancoNegroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blancoNegroLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(blancoNegroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(blancoNegroLayout.createSequentialGroup()
                        .addComponent(jScrollPane37, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane38, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(blancoNegroLayout.createSequentialGroup()
                        .addComponent(jScrollPane40, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane39, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(blancoNegroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(blancoNegroLayout.createSequentialGroup()
                        .addComponent(jScrollPane32, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane29, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(blancoNegroLayout.createSequentialGroup()
                        .addComponent(jScrollPane31, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane30, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(blancoNegroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(blancoNegroLayout.createSequentialGroup()
                        .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(blancoNegroLayout.createSequentialGroup()
                        .addComponent(jScrollPane24, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(blancoNegroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(blancoNegroLayout.createSequentialGroup()
                        .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(blancoNegroLayout.createSequentialGroup()
                        .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(blancoNegroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(blancoNegroLayout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(blancoNegroLayout.createSequentialGroup()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9))
        );

        Fondo.add(blancoNegro, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 80, -1, 256));

        Colores.setBackground(new java.awt.Color(71, 54, 46));
        Colores.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        bAmarillo.setBackground(java.awt.Color.yellow);
        bAmarillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAmarilloActionPerformed(evt);
            }
        });

        bAzul.setBackground(java.awt.Color.blue);
        bAzul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAzulActionPerformed(evt);
            }
        });

        bVerde.setBackground(java.awt.Color.green);
        bVerde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVerdeActionPerformed(evt);
            }
        });

        bRojo.setBackground(java.awt.Color.red);
        bRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRojoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ColoresLayout = new javax.swing.GroupLayout(Colores);
        Colores.setLayout(ColoresLayout);
        ColoresLayout.setHorizontalGroup(
            ColoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ColoresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ColoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bAmarillo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bAzul, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bVerde, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bRojo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ColoresLayout.setVerticalGroup(
            ColoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ColoresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bAmarillo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bAzul, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bVerde, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bRojo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Fondo.add(Colores, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        comprobar.setBackground(new java.awt.Color(200, 137, 99));
        comprobar.setFont(new java.awt.Font("Frank Ruhl Hofshi", 1, 14)); // NOI18N
        comprobar.setForeground(new java.awt.Color(87, 57, 50));
        comprobar.setText("Comprobar");
        comprobar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                comprobarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                comprobarMouseExited(evt);
            }
        });
        comprobar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comprobarActionPerformed(evt);
            }
        });
        Fondo.add(comprobar, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 340, 110, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cartel.png"))); // NOI18N
        Fondo.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 311, -1));

        borrar.setBackground(new java.awt.Color(200, 137, 99));
        borrar.setFont(new java.awt.Font("Frank Ruhl Hofshi", 1, 14)); // NOI18N
        borrar.setForeground(new java.awt.Color(87, 57, 50));
        borrar.setText("Borrar");
        borrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                borrarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                borrarMouseExited(evt);
            }
        });
        borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarActionPerformed(evt);
            }
        });
        Fondo.add(borrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 340, 80, -1));

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/madera.jpg"))); // NOI18N
        Fondo.add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 330, 390));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Fondo, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Fondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean comprobarColor(Color fondo) {
        if (fondo == Color.WHITE) {
            color = false;
        } else {
            color = true;
        }
        return color;
    }

    public void actualizarCubos(List<JTextArea> cubos, Color coloreado) {
        for (JTextArea cubo : cubos) {
            Color fondo = cubo.getBackground();
            if (!comprobarColor(fondo)) {
                cubo.setBackground(coloreado);
                cubo.setEnabled(true);
                return;
            }
        }
    }

    public void comprobarColores(JTextArea a) {
        Color fondo = a.getBackground();
        if (color = true) {
            if (fondo == Color.RED) {
                listaColores.add(0);
            }
            if (fondo == Color.GREEN) {
                listaColores.add(1);
            }
            if (fondo == Color.BLUE) {
                listaColores.add(2);
            }
            if (fondo == Color.YELLOW) {
                listaColores.add(3);
            }
        }
    }

    private void compararListas(ArrayList prueba, ArrayList respuesta) {
        comprobarColor(Color.WHITE);
        if (color == false) {
            for (int i = 0; i < 4; i++) {
                for (int j = 0; j < 4; j++) {
                    if (prueba.get(i) == respuesta.get(j)) {
                        switch (i) {
                            case 0:
                                comprobacion1_1.setBackground(Color.GRAY);
                                comprobacion1_1.setEnabled(true);
                                break;
                            case 1:
                                comprobacion1_2.setBackground(Color.GRAY);
                                comprobacion1_2.setEnabled(true);
                                break;
                            case 2:
                                comprobacion1_3.setBackground(Color.GRAY);
                                comprobacion1_3.setEnabled(true);
                                break;
                            case 3:
                                comprobacion1_4.setBackground(Color.GRAY);
                                comprobacion1_4.setEnabled(true);
                                break;

                        }
                    }
                }
            }
            // Cubo concide con el index y el color
            if (prueba.get(0) == respuesta.get(0)) {
                comprobacion1_1.setBackground(Color.BLACK);
                comprobacion1_1.setEnabled(true);
            }
            if (prueba.get(1) == respuesta.get(1)) {
                comprobacion1_2.setBackground(Color.BLACK);
                comprobacion1_2.setEnabled(true);
            }
            if (prueba.get(2) == respuesta.get(2)) {
                comprobacion1_3.setBackground(Color.BLACK);
                comprobacion1_3.setEnabled(true);
            }
            if (prueba.get(3) == respuesta.get(3)) {
                comprobacion1_4.setBackground(Color.BLACK);
                comprobacion1_4.setEnabled(true);
            }
        }

    }

    private void subirCubos(List<JTextArea> cubos) {
        if (contador == 1) {
            // Cubos colores
            cubo17.setBackground(cubo1.getBackground());
            cubo17.setEnabled(true);
            cubo18.setBackground(cubo2.getBackground());
            cubo18.setEnabled(true);
            cubo19.setBackground(cubo3.getBackground());
            cubo19.setEnabled(true);
            cubo20.setBackground(cubo4.getBackground());
            cubo20.setEnabled(true);

            // Cubos comprobacion
            comprobacion5_1.setBackground(comprobacion1_1.getBackground());
            comprobacion5_1.setEnabled(true);
            comprobacion5_2.setBackground(comprobacion1_2.getBackground());
            comprobacion5_2.setEnabled(true);
            comprobacion5_3.setBackground(comprobacion1_3.getBackground());
            comprobacion5_3.setEnabled(true);
            comprobacion5_4.setBackground(comprobacion1_4.getBackground());
            comprobacion5_4.setEnabled(true);

            // Cubos de escritura
            for (JTextArea cubo : cubos) {
                cubo.setBackground(Color.WHITE);
            }

            // Cubos comprobacion escritura
            comprobacion1_1.setBackground(Color.WHITE);
            comprobacion1_2.setBackground(Color.WHITE);
            comprobacion1_3.setBackground(Color.WHITE);
            comprobacion1_4.setBackground(Color.WHITE);

        } else if (contador == 2) {
            // Cubos colores
            cubo13.setBackground(cubo1.getBackground());
            cubo13.setEnabled(true);
            cubo14.setBackground(cubo2.getBackground());
            cubo14.setEnabled(true);
            cubo15.setBackground(cubo3.getBackground());
            cubo15.setEnabled(true);
            cubo16.setBackground(cubo4.getBackground());
            cubo16.setEnabled(true);

            // Cubos comprobacion
            comprobacion4_1.setBackground(comprobacion1_1.getBackground());
            comprobacion4_1.setEnabled(true);
            comprobacion4_2.setBackground(comprobacion1_2.getBackground());
            comprobacion4_2.setEnabled(true);
            comprobacion4_3.setBackground(comprobacion1_3.getBackground());
            comprobacion4_3.setEnabled(true);
            comprobacion4_4.setBackground(comprobacion1_4.getBackground());
            comprobacion4_4.setEnabled(true);

            // Cubos de escritura
            for (JTextArea cubo : cubos) {
                cubo.setBackground(Color.WHITE);
            }

            // Cubos comprobacion escritura
            comprobacion1_1.setBackground(Color.WHITE);
            comprobacion1_2.setBackground(Color.WHITE);
            comprobacion1_3.setBackground(Color.WHITE);
            comprobacion1_4.setBackground(Color.WHITE);

        } else if (contador == 3) {
            // Cubos colores
            cubo12.setBackground(cubo1.getBackground());
            cubo12.setEnabled(true);
            cubo11.setBackground(cubo2.getBackground());
            cubo11.setEnabled(true);
            cubo10.setBackground(cubo3.getBackground());
            cubo10.setEnabled(true);
            cubo9.setBackground(cubo4.getBackground());
            cubo9.setEnabled(true);

            // Cubos comprobacion
            comprobacion3_1.setBackground(comprobacion1_1.getBackground());
            comprobacion3_1.setEnabled(true);
            comprobacion3_2.setBackground(comprobacion1_2.getBackground());
            comprobacion3_2.setEnabled(true);
            comprobacion3_3.setBackground(comprobacion1_3.getBackground());
            comprobacion3_3.setEnabled(true);
            comprobacion3_4.setBackground(comprobacion1_4.getBackground());
            comprobacion3_4.setEnabled(true);

            // Cubos de escritura
            for (JTextArea cubo : cubos) {
                cubo.setBackground(Color.WHITE);
            }

            // Cubos comprobacion escritura
            comprobacion1_1.setBackground(Color.WHITE);
            comprobacion1_2.setBackground(Color.WHITE);
            comprobacion1_3.setBackground(Color.WHITE);
            comprobacion1_4.setBackground(Color.WHITE);

        } else if (contador == 4) {
            // Cubos colores
            cubo5.setBackground(cubo1.getBackground());
            cubo5.setEnabled(true);
            cubo6.setBackground(cubo2.getBackground());
            cubo6.setEnabled(true);
            cubo7.setBackground(cubo3.getBackground());
            cubo7.setEnabled(true);
            cubo8.setBackground(cubo4.getBackground());
            cubo8.setEnabled(true);

            // Cubos comprobacion
            comprobacion2_1.setBackground(comprobacion1_1.getBackground());
            comprobacion2_1.setEnabled(true);
            comprobacion2_2.setBackground(comprobacion1_2.getBackground());
            comprobacion2_2.setEnabled(true);
            comprobacion2_3.setBackground(comprobacion1_3.getBackground());
            comprobacion2_3.setEnabled(true);
            comprobacion2_4.setBackground(comprobacion1_4.getBackground());
            comprobacion2_4.setEnabled(true);

            // Cubos de escritura
            for (JTextArea cubo : cubos) {
                cubo.setBackground(Color.WHITE);
            }

            // Cubos comprobacion escritura
            comprobacion1_1.setBackground(Color.WHITE);
            comprobacion1_2.setBackground(Color.WHITE);
            comprobacion1_3.setBackground(Color.WHITE);
            comprobacion1_4.setBackground(Color.WHITE);
        }

    }

    public boolean comprobarFin() {
        if ((comprobacion1_1.getBackground() == Color.BLACK) && (comprobacion1_2.getBackground() == Color.BLACK) && (comprobacion1_3.getBackground() == Color.BLACK) && (comprobacion1_4.getBackground() == Color.BLACK)) {
            fin = true;
        } else {
            fin = false;
        }
        return fin;
    }

    private void bRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRojoActionPerformed
        // TODO add your handling code here:
        actualizarCubos(listaCubos, Color.RED);


    }//GEN-LAST:event_bRojoActionPerformed

    private void bVerdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVerdeActionPerformed
        // TODO add your handling code here:
        actualizarCubos(listaCubos, Color.GREEN);

    }//GEN-LAST:event_bVerdeActionPerformed

    private void bAzulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAzulActionPerformed
        // TODO add your handling code here:
        actualizarCubos(listaCubos, Color.BLUE);

    }//GEN-LAST:event_bAzulActionPerformed

    private void bAmarilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAmarilloActionPerformed
        // TODO add your handling code here:
        actualizarCubos(listaCubos, Color.YELLOW);

    }//GEN-LAST:event_bAmarilloActionPerformed


    private void comprobarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comprobarActionPerformed
        // TODO add your handling code here:
        listaColores.clear();
        comprobarColores(cubo1);
        comprobarColores(cubo2);
        comprobarColores(cubo3);
        comprobarColores(cubo4);
        //System.out.println(listaColores.toString());
        //System.out.println(respuesta.toString());

        compararListas(listaColores, respuesta);

        if (comprobarFin() == false) {
            subirCubos(listaCubos);
            contador++;
            if (contador >= 5) {
                // Creamos el icono para mostrar
                String r_icono = "derrota.png";
                ImageIcon icono = new ImageIcon(r_icono);
                // Título personalizado, icono personalizado
                String mensaje4 = "Lo siento, has perdido el juego";
                String titulo4 = "!Has perdido!";
                JOptionPane.showMessageDialog(null, mensaje4, titulo4, JOptionPane.INFORMATION_MESSAGE, icono);
                //Mensaje para voler a intentar o salir
                mensajeIntentarSalir();
            }
        } else if (comprobarFin() == true) {
            String r_icono = "trofeo.png";
            ImageIcon icono = new ImageIcon(r_icono);
            String mensaje4 = "Felicidades, has ganado el juego";
            String titulo4 = "!Has ganado!";
            JOptionPane.showMessageDialog(null, mensaje4, titulo4, JOptionPane.INFORMATION_MESSAGE, icono);
            mensajeIntentarSalir();
        }

    }//GEN-LAST:event_comprobarActionPerformed

    public void mensajeIntentarSalir() {
        int play = JOptionPane.showConfirmDialog(null, "¿Quieres volver a intentarlo?", "Información", JOptionPane.YES_NO_OPTION);
        if (play == JOptionPane.YES_OPTION) {
            //Si desea volver a jugar oculta la actual y crea una ventana nueva.
            this.setVisible(false);
            vetanaJuego play2 = new vetanaJuego();
            play2.setVisible(true);
        } else {
            //Si no quiere jugar más cierra el programa.
            System.exit(0);
        }
    }
    private void borrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarActionPerformed
        cubo1.setBackground(Color.WHITE);
        cubo2.setBackground(Color.WHITE);
        cubo3.setBackground(Color.WHITE);
        cubo4.setBackground(Color.WHITE);
    }//GEN-LAST:event_borrarActionPerformed

    private void borrarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_borrarMouseEntered
        borrar.setForeground(new Color(206, 16, 0));
    }//GEN-LAST:event_borrarMouseEntered

    private void borrarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_borrarMouseExited
        borrar.setForeground(new Color(87,57,50));
    }//GEN-LAST:event_borrarMouseExited

    private void comprobarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comprobarMouseEntered
        // TODO add your handling code here:
        comprobar.setForeground(new Color(206, 16, 0));
        
    }//GEN-LAST:event_comprobarMouseEntered

    private void comprobarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comprobarMouseExited
        // TODO add your handling code here:
         comprobar.setForeground(new Color(87,57,50));
    }//GEN-LAST:event_comprobarMouseExited
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("imagenes/cerebro.png"));
        return retValue;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(vetanaJuego.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(vetanaJuego.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(vetanaJuego.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(vetanaJuego.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new vetanaJuego().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Colores;
    private javax.swing.JPanel Fondo;
    private javax.swing.JPanel Partida;
    private javax.swing.JButton bAmarillo;
    private javax.swing.JButton bAzul;
    private javax.swing.JButton bRojo;
    private javax.swing.JButton bVerde;
    private javax.swing.JPanel blancoNegro;
    private javax.swing.JButton borrar;
    private javax.swing.JTextArea comprobacion1_1;
    private javax.swing.JTextArea comprobacion1_2;
    private javax.swing.JTextArea comprobacion1_3;
    private javax.swing.JTextArea comprobacion1_4;
    private javax.swing.JTextArea comprobacion2_1;
    private javax.swing.JTextArea comprobacion2_2;
    private javax.swing.JTextArea comprobacion2_3;
    private javax.swing.JTextArea comprobacion2_4;
    private javax.swing.JTextArea comprobacion3_1;
    private javax.swing.JTextArea comprobacion3_2;
    private javax.swing.JTextArea comprobacion3_3;
    private javax.swing.JTextArea comprobacion3_4;
    private javax.swing.JTextArea comprobacion4_1;
    private javax.swing.JTextArea comprobacion4_2;
    private javax.swing.JTextArea comprobacion4_3;
    private javax.swing.JTextArea comprobacion4_4;
    private javax.swing.JTextArea comprobacion5_1;
    private javax.swing.JTextArea comprobacion5_2;
    private javax.swing.JTextArea comprobacion5_3;
    private javax.swing.JTextArea comprobacion5_4;
    private javax.swing.JButton comprobar;
    private javax.swing.JTextArea cubo1;
    private javax.swing.JTextArea cubo10;
    private javax.swing.JTextArea cubo11;
    private javax.swing.JTextArea cubo12;
    private javax.swing.JTextArea cubo13;
    private javax.swing.JTextArea cubo14;
    private javax.swing.JTextArea cubo15;
    private javax.swing.JTextArea cubo16;
    private javax.swing.JTextArea cubo17;
    private javax.swing.JTextArea cubo18;
    private javax.swing.JTextArea cubo19;
    private javax.swing.JTextArea cubo2;
    private javax.swing.JTextArea cubo20;
    private javax.swing.JTextArea cubo3;
    private javax.swing.JTextArea cubo4;
    private javax.swing.JTextArea cubo5;
    private javax.swing.JTextArea cubo6;
    private javax.swing.JTextArea cubo7;
    private javax.swing.JTextArea cubo8;
    private javax.swing.JTextArea cubo9;
    private javax.swing.JLabel fondo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JScrollPane jScrollPane26;
    private javax.swing.JScrollPane jScrollPane27;
    private javax.swing.JScrollPane jScrollPane28;
    private javax.swing.JScrollPane jScrollPane29;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane30;
    private javax.swing.JScrollPane jScrollPane31;
    private javax.swing.JScrollPane jScrollPane32;
    private javax.swing.JScrollPane jScrollPane33;
    private javax.swing.JScrollPane jScrollPane34;
    private javax.swing.JScrollPane jScrollPane35;
    private javax.swing.JScrollPane jScrollPane36;
    private javax.swing.JScrollPane jScrollPane37;
    private javax.swing.JScrollPane jScrollPane38;
    private javax.swing.JScrollPane jScrollPane39;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane40;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
